{
    "IPlayerServices": {
        "desc": "Specifically playtime, owned games, badges, and Steam level. For player summaries, bans and friend list, go to [ISteamUser](ISteamUser)",
        "GetRecentlyPlayedGames": {
            "desc": "Get information about games the user has played within the last 2 weeks.",
            "function": "getRecentlyPlayedGames",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "count": {
                    "type": "Integer",
                    "desc": "Number of recently played games to return. Unset or 0 will return all recently played games",
                    "default": 0
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned games"
                },
                "games": {
                    "type": "Array",
                    "desc": "Array of objects containing information about recently played games",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Full name of the game"
                        },
                        "appid": {
                            "type": "Integer",
                            "desc": "Steam internal app id, always unique"
                        },
                        "playtime": {
                            "type": "Integer",
                            "desc": "Total game playtime in minutes"
                        },
                        "playtime_recent": {
                            "type": "Integer",
                            "desc": "Game playtime in minutes over the last 2 weeks"
                        },
                        "url_store": {
                            "type": "String",
                            "desc": "Basic url to store page, url is not canonical (name is not in url)"
                        },
                        "url_store_header": {
                            "type": "String",
                            "desc": "Basic url to header image for Steam store page, url stays the same but the resulting image can change frequently"
                        },
                        "url_app_logo": {
                            "type": "String",
                            "desc": "Url to app logo, seems to always be 184x69 pixels and never changes"
                        },
                        "url_app_icon": {
                            "type": "String",
                            "desc": "Url to app icon, seems to always be 32x32 pixels and never changes"
                        }
                    }
                }
            },
            "example_call": "getRecentlyPlayedGames('76561198099490962', 2)",
            "example_data": {
                "count": 2,
                "games": [
                    {
                        "name": "Counter-Strike: Global Offensive",
                        "appid": 730,
                        "playtime": 61040,
                        "playtime_recent": 264,
                        "url_store": "https://store.steampowered.com/app/730",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/730/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/d0595ff02f5c79fd19b06f4d6165c3fda2372820.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/69f7ebe2735c366c65c0b33dae00e12dc40edbe4.jpg"
                    },
                    {
                        "name": "Call of Duty: World at War",
                        "appid": 10090,
                        "playtime": 817,
                        "playtime_recent": 24,
                        "url_store": "https://store.steampowered.com/app/10090",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/10090/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/10090/281c6232bf39e96f2592e241dafe02ef54499df5.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/10090/2bfb85222af4a01842baa5c3a16a080eb27ac6c3.jpg"
                    }
                ]
            }
        },
        "GetOwnedGames": {
            "desc": "Retrieve a list of all games the user has ever bought or installed (free-to-play). This list is seemingly not sorted in any way at all. This will likely not match the user's current library, as some may have installed a free-to-play game, never played it, and then uninstalled it. Even then, that free-to-play game will forever be included as an \"owned game.\"\r\n\r\nDespite the Web API claiming that free-to-play games are excluded by default, and may be included if specified, this isn't true and free-to-play games will ALWAYS be returned no matter what you try to tell the Web API. Trust me, I tried and `include_played_free_games` does literally nothing. Sadly there is no way to tell if any of the returned games are free-to-play with this API on it's own, so you'll either have to use another API to check, or keep track of all appIDs of free-to-play games. Thanks Volvo...",
            "function": "getOwnedGames",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "appIDs": {
                    "type": "Array",
                    "desc": "Array of integer appIDs (or just one integer, no array necessary) to specifically retrieve, set to null to get all owned games",
                    "default": null
                },
                "moreInfo": {
                    "type": "Boolean",
                    "desc": "Set to true to get more info: name, image urls",
                    "default": false
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned games"
                },
                "games": {
                    "type": "Array",
                    "desc": "Array of objects containing information about owned games",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Full name of the game, only returned if `moreInfo` is `true`"
                        },
                        "appid": {
                            "type": "Integer",
                            "desc": "Steam internal app id, always unique"
                        },
                        "playtime": {
                            "type": "Integer",
                            "desc": "Total game playtime in minutes"
                        },
                        "playtime_recent": {
                            "type": "Integer",
                            "desc": "Game playtime in minutes over the last 2 weeks"
                        },
                        "url_store": {
                            "type": "String",
                            "desc": "Basic url to store page, url is not canonical (name is not in url)"
                        },
                        "url_store_header": {
                            "type": "String",
                            "desc": "Basic url to header image for Steam store page, url stays the same but the resulting image can change frequently, only returned if `moreInfo` is `true`"
                        },
                        "url_app_logo": {
                            "type": "String",
                            "desc": "Url to app logo, seems to always be 184x69 pixels and never changes, only returned if `moreInfo` is `true`"
                        },
                        "url_app_icon": {
                            "type": "String",
                            "desc": "Url to app icon, seems to always be 32x32 pixels and never changes, only returned if `moreInfo` is `true`"
                        }
                    }
                }
            },
            "example_call": "getOwnedGames('76561198099490962', [730, 264710], true)",
            "example_data": {
                "count": 2,
                "games": [
                    {
                        "name": "Subnautica",
                        "appid": 264710,
                        "playtime": 224,
                        "playtime_recent": 0,
                        "url_store": "https://store.steampowered.com/app/264710",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/264710/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/d6bfaafed7b41466cc99b70972a944ac7e4d6edf.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/8a14ceef6e230330a916d7a6324b8c52d464d569.jpg"
                    },
                    {
                        "name": "Counter-Strike: Global Offensive",
                        "appid": 730,
                        "playtime": 61040,
                        "playtime_recent": 264,
                        "url_store": "https://store.steampowered.com/app/730",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/730/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/d0595ff02f5c79fd19b06f4d6165c3fda2372820.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/69f7ebe2735c366c65c0b33dae00e12dc40edbe4.jpg"
                    }
                ]
            }
        },
        "GetSteamLevel": {
            "desc": "Get the current Steam Level of the user, and absolutely nothing more.",
            "function": "getSteamLevel",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                }
            },
            "result": {
                "level": {
                    "type": "Integer",
                    "desc": "Steam level of the user"
                }
            },
            "example_call": "getSteamLevel('76561198099490962')",
            "example_data": {
                "level": 71
            }
        },
        "GetBadges": {
            "desc": "Get all badges the user currently has, and some detailed level information.",
            "function": "getBadges",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                }
            },
            "result": {
                "level": {
                    "type": "Integer",
                    "desc": "Steam level of the user"
                },
                "xp": {
                    "type": "Integer",
                    "desc": "Total XP the Steam user has"
                },
                "level_xp": {
                    "type": "Integer",
                    "desc": "The XP requirement for the user's current Steam level"
                },
                "next_level_xp": {
                    "type": "Integer",
                    "desc": "The XP requirement for the next Steam level"
                },
                "badges": {
                    "type": "Object",
                    "desc": "Badges by types",
                    "object": {
                        "game": {
                            "type": "Object",
                            "desc": "Game badges listed by appids",
                            "object": {
                                "appid": {
                                    "type": "Integer",
                                    "desc": "Steam internal app id, always unique"
                                },
                                "level": {
                                    "type": "Integer",
                                    "desc": "Level of the badge, could be any positive integer, or 0 if only the foil badge was unlocked"
                                },
                                "earned": {
                                    "type": "Integer",
                                    "desc": "Time the badge was initially level 1, in seconds since the epoch, could be 0 if only the foil badge was unlocked"
                                },
                                "xp": {
                                    "type": "Integer",
                                    "desc": "Amount of XP the badge is worth, could be 0 if only the foil badge was unlocked"
                                },
                                "scarcity": {
                                    "type": "Integer",
                                    "desc": "The total number of Steam users with a badge level equal to or higher than this badge level, could be 0 if only the foil badge was unlocked"
                                },
                                "foil": {
                                    "type": "Object",
                                    "desc": "The foil badge information, could be 0 if the user has not unlocked the foil version. Contains the `level`, `earned`, `xp` and `scarcity` properties"
                                }
                            }
                        },
                        "event": {
                            "type": "Object",
                            "desc": "Limited time event badges, listed by event tag names. Other than the new `name` property, the badges are identical in structure to game badges",
                            "object": {
                                "name": {
                                    "type": "String",
                                    "desc": "Full name of the badge"
                                }
                            }
                        },
                        "special": {
                            "type": "Object",
                            "desc": "Steam specific badges, each with a very unique way of earning/ leveling, listed by tag names. Identical to event badges, but they have no `appid` or `foil` property"
                        }
                    }
                }
            },
            "example_call": "getBadges('76561198099490962')",
            "example_data": {
                "level": 71,
                "xp": 29042,
                "level_xp": 28800,
                "next_level_xp": 29600,
                "badges": {
                    "game": {
                        "730": {
                            "appid": 730,
                            "level": 5,
                            "earned": 1466352436,
                            "xp": 500,
                            "scarcity": 2794555,
                            "foil": 0
                        },
                        "506670": {
                            "appid": 506670,
                            "level": 5,
                            "earned": 1495724426,
                            "xp": 500,
                            "scarcity": 23664,
                            "foil": 0
                        }
                    },
                    "event": {
                        "summer-2016": {
                            "name": "2016: Summer Sale",
                            "appid": 480730,
                            "level": 1,
                            "earned": 1467080364,
                            "xp": 100,
                            "scarcity": 990954,
                            "foil": 0
                        },
                        "awards-2017": {
                            "name": "2017: Steam Awards",
                            "appid": 762800,
                            "level": 22,
                            "earned": 1517712529,
                            "xp": 2200,
                            "scarcity": 13291,
                            "foil": 0
                        }
                    },
                    "special": {
                        "games": {
                            "name": "Owned Games",
                            "level": 127,
                            "earned": 1547050916,
                            "xp": 356,
                            "scarcity": 4750842
                        },
                        "years": {
                            "name": "Years of Service",
                            "level": 5,
                            "earned": 1374542223,
                            "xp": 250,
                            "scarcity": 68071999
                        }
                    }
                }
            }
        },
        "GetCommunityBadgeProgress": {
            "desc": "Returns the badge progress for specific task-based badges.",
            "function": "getBadgeProgress",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "badgeID": {
                    "type": "String",
                    "desc": "Badge ID, could also be the true integer value of the badge ID. Valid values for this are currently `community`, `summer-2012`, `holiday-2012`, `hardware-beta`, `awards-2016`, `awards-2017`, `awards-2018` and `spring-cleaning`.",
                    "default": "community"
                }
            },
            "result": {
                "quests": {
                    "type": "Object",
                    "desc": "Object of quests, listed by quest ids",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Always 'unknown'. This will eventually contain the description of the task once a map is created to connect quest ids to their actual tasks. You can support development of this feature by finding the `quests.json` file inside the `json` directory in the repository code!"
                        },
                        "completed": {
                            "type": "Boolean",
                            "desc": "Whether or not the task has been completed"
                        }
                    }
                },
                "count": {
                    "type": "Integer",
                    "desc": "Number of quests for this badge"
                },
                "completed": {
                    "type": "Integer",
                    "desc": "Number of completed quests for this badge"
                }
            },
            "example_call": "getBadges('76561198099490962', 'community')",
            "example_data": {
                "quests": {
                    "260": {
                        "name": "unknown",
                        "completed": false
                    },
                    "261": {
                        "name": "unknown",
                        "completed": false
                    },
                    "262": {
                        "name": "unknown",
                        "completed": false
                    },
                    "263": {
                        "name": "unknown",
                        "completed": false
                    }
                },
                "count": 4,
                "completed": 0
            }
        }
    },
    "ISteamUser": {
        "desc": "Returns more detailed information about user profiles; summaries, bans, friends. For Steam level, badges, games, and playtime, go to [IPlayerServices](IPlayerServices)",
        "GetFriendList": {
            "desc": "Gets the friends of the Steam user, if public.",
            "function": "getFriendList",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "sorted": {
                    "type": "Boolean",
                    "desc": "Enable sorting by friending time, with the oldest friends at the top of the resulting list",
                    "default": false
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of friends"
                },
                "friends": {
                    "type": "Array",
                    "desc": "Array of friend objects, sorted if the `sorted` paramter is `true`",
                    "object": {
                        "steamID": {
                            "type": "String",
                            "desc": "Steam ID of the friend"
                        },
                        "since": {
                            "type": "Integer",
                            "desc": "Time the friend was added, in seconds since the epoch"
                        }
                    }
                }
            },
            "example_call": "getFriendList('76561198099490962', true)",
            "example_data": {
                "count": 4,
                "friends": [
                    {
                        "steamID": "76561198064527259",
                        "since": 1374546543
                    },
                    {
                        "steamID": "76561198073477368",
                        "since": 1385304477
                    },
                    {
                        "steamID": "76561198055109162",
                        "since": 1415236183
                    },
                    {
                        "steamID": "76561198190833690",
                        "since": 1475462732
                    }
                ]
            }
        },
        "GetPlayerBans": {
            "desc": "Retrieves ban information on the provided Steam IDs. Notice that is PLURAL. You can get information on multiple Steam IDs at once, however Steam may internally limit the max number of Steam IDs you can query at once.",
            "function": "getPlayerBans",
            "parameters": {
                "steamIDs": {
                    "type": "Array",
                    "desc": "Array of Steam ID strings, or just one, no array necessary"
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned profiles, useful for checking if any Steam IDs were ignored or cropped from the final result"
                },
                "players": {
                    "type": "Object",
                    "desc": "Ban objects listed by Steam ID",
                    "object": {
                        "community": {
                            "type": "Boolean",
                            "desc": "Whether or not the account has a community ban"
                        },
                        "economy": {
                            "type": "String",
                            "desc": "What type of economy ban the account has. These are often temporary. Sadly, I don't know the possible values of this. If you have account restrictions, or know someone who does, please reach out to me so I can finish development on this part."
                        },
                        "vac": {
                            "type": "Boolean",
                            "desc": "Whether or not the account has a VAC ban. It may be possible for a single account to have multiple VAC bans, but I personally doubt it as VAC normally bans across ALL VAC secure games."
                        },
                        "bans": {
                            "type": "Integer",
                            "desc": "Total number of bans on the account; VAC + Game bans"
                        },
                        "vacBans": {
                            "type": "Integer",
                            "desc": "Number of VAC bans on the account"
                        },
                        "gameBans": {
                            "type": "Integer",
                            "desc": "Number of Game bans on the account. Game bans are not VAC bans, they are manually given to a player by the developer of the game they got banned on."
                        },
                        "lastBan": {
                            "type": "Integer",
                            "desc": "Number of days since the last ban was given to the account, a value of `0` indicates the account recieved a ban *today*"
                        }
                    }
                }
            },
            "example_call": "getPlayerBans('76561198099490962')",
            "example_data": {
                "count": 1,
                "players": {
                    "76561198099490962": {
                        "community": false,
                        "economy": "none",
                        "vac": false,
                        "bans": 0,
                        "vacBans": 0,
                        "gameBans": 0,
                        "lastBan": 0
                    }
                }
            }
        },
        "GetPlayerSummaries": {
            "desc": "Get basic community profile information from the Steam IDs. Notice that is PLURAL. You can get information on multiple Steam IDs at once, however Steam may internally limit the max number of Steam IDs you can query at once.",
            "function": "getPlayerSummaries",
            "parameters": {
                "steamIDs": {
                    "type": "Array",
                    "desc": "Array of Steam ID strings, or just one, no array necessary"
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned profiles, useful for checking if any Steam IDs were ignored or cropped from the final result"
                },
                "players": {
                    "type": "Object",
                    "desc": "Player objects listed by Steam ID",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Persona name, this is shown in games and on the website"
                        },
                        "realName": {
                            "type": "String",
                            "desc": "The \"real name\" set by the account, not guaranteed to actually be real. May be set to Boolean `false` if unset, useful for checking if a string is set before printing it"
                        },
                        "url": {
                            "type": "String",
                            "desc": "Community profile URL, may contain the Steam ID or be the custom vanity url set by the account"
                        },
                        "state": {
                            "type": "Integer",
                            "desc": "A value from 0-6; 0 - Offline, 1 - Online, 2 - Busy, 3 - Away, 4 - Snooze, 5 - Looking to Trade, 6 - Looking to Play"
                        },
                        "stateString": {
                            "type": "String",
                            "desc": "Mapped value of `state` to a string, see the `persona.json` file in `json` for values"
                        },
                        "public": {
                            "type": "Boolean",
                            "desc": "Whether or not the profile is visible, if this is false then some interfaces may not work at all, and limited data is available through player summaries"
                        },
                        "comments": {
                            "type": "Boolean",
                            "desc": "Whether or not the comments are set to public, if this is false then you won't be able to comment on the profile, and may also not be able to see comments"
                        },
                        "joined": {
                            "type": "Integer",
                            "desc": "Time the account was created, in seconds since the epoch. This is not available for private accounts, however you can easily use the Steam ID to guess the time the account was created anyway."
                        },
                        "offline": {
                            "type": "Integer",
                            "desc": "Time the account last went offline, in seconds since the epoch. This does not mean the player is currently offline, or when they *actually* went offline, just the last time their status changed to be offline."
                        },
                        "community": {
                            "type": "Boolean",
                            "desc": "Whether or not the profile has a community profile set up. You should not allow accounts without a community profile to use your services."
                        },
                        "group": {
                            "type": "Integer",
                            "desc": "The primary group set by the user, if no group is set then this value is a Boolean `false` to avoid ambiguity"
                        },
                        "inGame": {
                            "type": "Boolean",
                            "desc": "If the user is currently in a game"
                        },
                        "appid": {
                            "type": "Integer",
                            "desc": "If `inGame` is true, then this is the app id of the game being played. If `inGame` is true and this value is 0, then the account is playing a non-Steam game."
                        },
                        "appName": {
                            "type": "String",
                            "desc": "If `inGame` is true, then this is most likely the name of the game being played. If `appid` is 0, this is the \"extra game info\" from the non-Steam game, and may not be an accurate representation of the true game name."
                        },
                        "avatar": {
                            "type": "Object",
                            "desc": "Holds the various urls for the avatar sizes",
                            "object": {
                                "small": {
                                    "type": "String",
                                    "desc": "URL for the 32x32 avatar"
                                },
                                "medium": {
                                    "type": "String",
                                    "desc": "URL for the 64x64 avatar"
                                },
                                "large": {
                                    "type": "String",
                                    "desc": "URL for the 184x184 avatar"
                                }
                            }
                        },
                        "location": {
                            "type": "Object",
                            "desc": "The public location of the account, should never be used for any real location authentication, as users can change this whenever and however they want",
                            "object": {
                                "country": {
                                    "type": "String",
                                    "desc": "Full English name of the country, is a Boolean `false` if not set by the account"
                                },
                                "state": {
                                    "type": "String",
                                    "desc": "Full English name of the state/ province/ city-state, is a Boolean `false` if not set by the account"
                                },
                                "city": {
                                    "type": "String",
                                    "desc": "Full English name of the city, is a Boolean `false` if not set by the account. Keep in mind some country states have only one possible city, and some have no city options at all."
                                },
                                "countryCode": {
                                    "type": "String",
                                    "desc": "The country code for the country, should adhere to world standards (i.e. United States code is `US`)"
                                },
                                "stateCode": {
                                    "type": "String",
                                    "desc": "The state code for the state, for some countries this is the official abbreviation (i.e. Alaska state code is `AK`) but for most this is just a random internal code"
                                },
                                "cityCode": {
                                    "type": "Integer",
                                    "desc": "The city code for the city, seems to be a completely unique id, otherwise this is not standardized and only for internal use"
                                }
                            }
                        }
                    }
                }
            },
            "example_call": "getPlayerSummaries('76561198099490962')",
            "example_data": {
                "count": 1,
                "players": {
                    "76561198099490962": {
                        "name": "Almic",
                        "realName": "Mick Ashton",
                        "url": "https://steamcommunity.com/id/almic/",
                        "state": 1,
                        "stateString": "online",
                        "public": true,
                        "comments": true,
                        "joined": 1374542223,
                        "offline": 1547510790,
                        "community": true,
                        "group": "103582791435315066",
                        "inGame": true,
                        "appid": 730,
                        "appName": "Counter-Strike: Global Offensive",
                        "avatar": {
                            "small": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d92bde555a21e7e5074b5cdb8ed733e088cad1c5.jpg",
                            "medium": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d92bde555a21e7e5074b5cdb8ed733e088cad1c5_medium.jpg",
                            "large": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d92bde555a21e7e5074b5cdb8ed733e088cad1c5_full.jpg"
                        },
                        "location": {
                            "country": "United States",
                            "state": "Alaska",
                            "city": "Nome",
                            "countryCode": "US",
                            "stateCode": "AK",
                            "cityCode": 69
                        }
                    }
                }
            }
        },
        "GetUserGroupList": {
            "desc": "All the groups the account is a member of, this includes all game-related groups as well as community made groups.",
            "function": "getUserGroups",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                }
            },
            "result": {
                "groups": {
                    "type": "Array",
                    "desc": "Array of group id strings"
                }
            },
            "example_call": "getUserGroups('76561198099490962')",
            "example_data": {
                "groups": [
                    "3284297",
                    "5165781",
                    "5233424",
                    "5647945",
                    "5791388",
                    "5793658",
                    "8600182",
                    "9958636",
                    "25100141",
                    "33392184",
                    "33650713"
                ]
            }
        },
        "ResolveVanityURL": {
            "desc": "Converts custom account and group names to an id. Please do not use the entire URL, instead extract the actual name from the custom url before calling this function. For Steam accounts, custom urls are `https://steamcommunity.com/id/{{VANITY NAME}}` and for groups is `https://steamcommunity.com/groups/{{VANITY NAME}}`\r\n\r\nDo not use the third type: game groups. From the surface it looks like official game groups are not accessible by normal methods, and only show up as outdated web pages with little to no content. Official game groups will probably be deprecated in due Valve time, or may be suddenly thrown at our faces. Either way, I wouldn't recommend using them at all right now, because like I said, you can't even access the group pages by normal methods.",
            "function": "resolveName",
            "parameters": {
                "name": {
                    "type": "String",
                    "desc": "Custom name found in the url of the account or group"
                },
                "type": {
                    "type": "String",
                    "desc": "Type of name to be resolved, supported values are `user` and `group`. The integer values 1 and 2 can be passed instead.",
                    "default": "user"
                }
            },
            "result": {
                "id": {
                    "type": "String",
                    "desc": "The full Steam ID for users, or the group id for groups"
                }
            },
            "example_call": "resolveName('almic')",
            "example_data": {
                "id": "76561198099490962"
            }
        }
    },
    "Special": {
        "desc": "Custom functions that doesn't use the traditional Steam Web API stuff. As such, they are likely to change in functionality at some point in the future. For now these are safe to use in production, but be warned!",
        "GetGroupInfo": {
            "noKey": true,
            "desc": "Retrieve detailed information about a community group. Like player summaries but for groups!",
            "function": "getGroupInfo",
            "parameters": {
                "id": {
                    "type": "String",
                    "desc": "Group 64-bit id, short id, or vanity url name. The 64-bit ID is used in just about all places on the Steam site, the vanity name only appears as the URL, and the short id is only visible to group admins and through the [GetUserGroupList](ISteamUser#GetUserGroupList) API. All of these work just the same, however you should favor the 64-bit id over the short id and name when you can."
                },
                "type": {
                    "type": "String",
                    "desc": "Type of id for the group, supported values are `gid` and `group`. Use `gid` for the number ids, and `group` for the vanity url name.",
                    "default": "gid"
                }
            },
            "result": {
                "gid": {
                    "type": "String",
                    "desc": "Full group id number. Fun trivia, Steam seems to only use the last 32 bits internally. Check out the hexadecimal format of any gid!"
                },
                "name": {
                    "type": "String",
                    "desc": "Unique group name, locked on group creation. This is NOT THE VANITY URL, and as such DOES NOT WORK FOR GETTING GROUP INFO."
                },
                "vanityName": {
                    "type": "String",
                    "desc": "The unique group url name, can be changed at any time by group admins"
                },
                "summary": {
                    "type": "String",
                    "desc": "HTML code for the group description, since this comes from Steam it is safe to be rendered right on your own web pages, however keep in mind that all links are redirected to the Steam link filter"
                },
                "members": {
                    "type": "Integer",
                    "desc": "Total number of members in the group, slightly smaller than the true number due to private accounts not being included in this count"
                },
                "membersReal": {
                    "type": "Integer",
                    "desc": "True number of members in the group, although the regular `members` count is more accurate because it doesn't include all the private profiles"
                },
                "membersOnline": {
                    "type": "Integer",
                    "desc": "Number of members currently online"
                },
                "membersGame": {
                    "type": "Integer",
                    "desc": "Number of members playing a game"
                },
                "membersChat": {
                    "type": "Integer",
                    "desc": "Number of members in the group chat room"
                },
                "logo": {
                    "type": "Object",
                    "desc": "Holds the various urls for the group logo sizes",
                    "object": {
                        "small": {
                            "type": "String",
                            "desc": "URL for the 32x32 logo"
                        },
                        "medium": {
                            "type": "String",
                            "desc": "URL for the 64x64 logo"
                        },
                        "large": {
                            "type": "String",
                            "desc": "URL for the 184x184 logo"
                        }
                    }
                }
            },
            "example_call": "getGroupInfo('103582791435315066')",
            "example_data": {
                "gid": "103582791435315066",
                "name": "DINOSOWER1337",
                "vanityName": "DINOSOWEROfficial",
                "summary": "Welcome to the group anyone can wear the tag! not like I can stop em :)<br><br>There's only two types of players in dinosower. Cheaters and people who arent better than me.",
                "members": 415842,
                "membersReal": 453019,
                "membersOnline": 24858,
                "membersGame": 2695,
                "membersChat": 429,
                "logo": {
                    "small": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/eafb277c3504bf10fe6d800d96ea074516a47f4e.jpg",
                    "medium": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/eafb277c3504bf10fe6d800d96ea074516a47f4e_medium.jpg",
                    "large": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/eafb277c3504bf10fe6d800d96ea074516a47f4e_full.jpg"
                }
            }
        }
    }
}
