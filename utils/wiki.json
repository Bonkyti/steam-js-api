{
    "IPlayerService": {
        "desc": "Specifically playtime, owned games, badges, and Steam level. For player summaries, bans and friend list, go to [ISteamUser](ISteamUser)",
        "GetRecentlyPlayedGames": {
            "desc": "Get information about games the user has played within the last 2 weeks.",
            "function": "getRecentlyPlayedGames",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "count": {
                    "type": "Integer",
                    "desc": "Number of recently played games to return. Unset or 0 will return all recently played games",
                    "default": 0
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned games"
                },
                "games": {
                    "type": "Array",
                    "desc": "Array of objects containing information about recently played games",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Full name of the game"
                        },
                        "appID": {
                            "type": "Integer",
                            "desc": "Steam internal app ID, always unique"
                        },
                        "playtime": {
                            "type": "Integer",
                            "desc": "Total game playtime in minutes"
                        },
                        "playtime_recent": {
                            "type": "Integer",
                            "desc": "Game playtime in minutes over the last 2 weeks"
                        },
                        "url_store": {
                            "type": "String",
                            "desc": "Basic url to store page, url is not canonical (name is not in url)"
                        },
                        "url_store_header": {
                            "type": "String",
                            "desc": "Basic url to header image for Steam store page, url stays the same but the resulting image can change frequently"
                        },
                        "url_app_logo": {
                            "type": "String",
                            "desc": "Url to app logo, seems to always be 184x69 pixels and never changes"
                        },
                        "url_app_icon": {
                            "type": "String",
                            "desc": "Url to app icon, seems to always be 32x32 pixels and never changes"
                        }
                    }
                }
            },
            "example_call": "getRecentlyPlayedGames('76561198099490962', 2)",
            "example_data": {
                "count": 2,
                "games": [
                    {
                        "name": "Counter-Strike: Global Offensive",
                        "appID": 730,
                        "playtime": 61040,
                        "playtime_recent": 264,
                        "url_store": "https://store.steampowered.com/app/730",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/730/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/d0595ff02f5c79fd19b06f4d6165c3fda2372820.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/69f7ebe2735c366c65c0b33dae00e12dc40edbe4.jpg"
                    },
                    {
                        "name": "Call of Duty: World at War",
                        "appID": 10090,
                        "playtime": 817,
                        "playtime_recent": 24,
                        "url_store": "https://store.steampowered.com/app/10090",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/10090/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/10090/281c6232bf39e96f2592e241dafe02ef54499df5.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/10090/2bfb85222af4a01842baa5c3a16a080eb27ac6c3.jpg"
                    }
                ]
            }
        },
        "GetOwnedGames": {
            "desc": "Retrieve a list of all games the user has ever bought or installed (free-to-play). This list is seemingly not sorted in any way at all. This will likely not match the user's current library, as some may have installed a free-to-play game, never played it, and then uninstalled it. Even then, that free-to-play game will forever be included as an \"owned game.\"\r\n\r\nDespite the Web API claiming that free-to-play games are excluded by default, and may be included if specified, this isn't true and free-to-play games will ALWAYS be returned no matter what you try to tell the Web API. Trust me, I tried and `include_played_free_games` does literally nothing. Sadly there is no way to tell if any of the returned games are free-to-play with this API on it's own, so you'll either have to use another API to check, or keep track of all appIDs of free-to-play games. Thanks Volvo...",
            "function": "getOwnedGames",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "appIDs": {
                    "type": "Array",
                    "desc": "Array of integer appIDs (or just one integer, no array necessary) to specifically retrieve, set to null to get all owned games",
                    "default": null
                },
                "moreInfo": {
                    "type": "Boolean",
                    "desc": "Set to true to get more info: name, image urls",
                    "default": false
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned games"
                },
                "games": {
                    "type": "Array",
                    "desc": "Array of objects containing information about owned games",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Full name of the game, only returned if `moreInfo` is `true`"
                        },
                        "appID": {
                            "type": "Integer",
                            "desc": "Steam internal app ID, always unique"
                        },
                        "playtime": {
                            "type": "Integer",
                            "desc": "Total game playtime in minutes"
                        },
                        "playtime_recent": {
                            "type": "Integer",
                            "desc": "Game playtime in minutes over the last 2 weeks"
                        },
                        "url_store": {
                            "type": "String",
                            "desc": "Basic url to store page, url is not canonical (name is not in url)"
                        },
                        "url_store_header": {
                            "type": "String",
                            "desc": "Basic url to header image for Steam store page, url stays the same but the resulting image can change frequently, only returned if `moreInfo` is `true`"
                        },
                        "url_app_logo": {
                            "type": "String",
                            "desc": "Url to app logo, seems to always be 184x69 pixels and never changes, only returned if `moreInfo` is `true`"
                        },
                        "url_app_icon": {
                            "type": "String",
                            "desc": "Url to app icon, seems to always be 32x32 pixels and never changes, only returned if `moreInfo` is `true`"
                        }
                    }
                }
            },
            "example_call": "getOwnedGames('76561198099490962', [730, 264710], true)",
            "example_data": {
                "count": 2,
                "games": [
                    {
                        "name": "Subnautica",
                        "appID": 264710,
                        "playtime": 224,
                        "playtime_recent": 0,
                        "url_store": "https://store.steampowered.com/app/264710",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/264710/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/d6bfaafed7b41466cc99b70972a944ac7e4d6edf.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/8a14ceef6e230330a916d7a6324b8c52d464d569.jpg"
                    },
                    {
                        "name": "Counter-Strike: Global Offensive",
                        "appID": 730,
                        "playtime": 61040,
                        "playtime_recent": 264,
                        "url_store": "https://store.steampowered.com/app/730",
                        "url_store_header": "https://steamcdn-a.akamaihd.net/steam/apps/730/header.jpg",
                        "url_app_logo": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/d0595ff02f5c79fd19b06f4d6165c3fda2372820.jpg",
                        "url_app_icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/730/69f7ebe2735c366c65c0b33dae00e12dc40edbe4.jpg"
                    }
                ]
            }
        },
        "GetSteamLevel": {
            "desc": "Get the current Steam Level of the user, and absolutely nothing more.",
            "function": "getSteamLevel",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                }
            },
            "result": {
                "level": {
                    "type": "Integer",
                    "desc": "Steam level of the user"
                }
            },
            "example_call": "getSteamLevel('76561198099490962')",
            "example_data": {
                "level": 71
            }
        },
        "GetBadges": {
            "desc": "Get all badges the user currently has, and some detailed level information.",
            "function": "getBadges",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                }
            },
            "result": {
                "level": {
                    "type": "Integer",
                    "desc": "Steam level of the user"
                },
                "xp": {
                    "type": "Integer",
                    "desc": "Total XP the Steam user has"
                },
                "level_xp": {
                    "type": "Integer",
                    "desc": "The XP requirement for the user's current Steam level"
                },
                "next_level_xp": {
                    "type": "Integer",
                    "desc": "The XP requirement for the next Steam level"
                },
                "badges": {
                    "type": "Object",
                    "desc": "Badges by types",
                    "object": {
                        "game": {
                            "type": "Object",
                            "desc": "Game badges listed by app IDs",
                            "object": {
                                "appID": {
                                    "type": "Integer",
                                    "desc": "Steam internal app ID, always unique"
                                },
                                "level": {
                                    "type": "Integer",
                                    "desc": "Level of the badge, could be any positive integer, or 0 if only the foil badge was unlocked"
                                },
                                "earned": {
                                    "type": "Integer",
                                    "desc": "Time the badge was initially level 1, in seconds since the epoch, could be 0 if only the foil badge was unlocked"
                                },
                                "xp": {
                                    "type": "Integer",
                                    "desc": "Amount of XP the badge is worth, could be 0 if only the foil badge was unlocked"
                                },
                                "scarcity": {
                                    "type": "Integer",
                                    "desc": "The total number of Steam users with a badge level equal to or higher than this badge level, could be 0 if only the foil badge was unlocked"
                                },
                                "foil": {
                                    "type": "Object",
                                    "desc": "The foil badge information, could be 0 if the user has not unlocked the foil version. Contains the `level`, `earned`, `xp` and `scarcity` properties"
                                }
                            }
                        },
                        "event": {
                            "type": "Object",
                            "desc": "Limited time event badges, listed by event tag names. Other than the new `name` property, the badges are identical in structure to game badges",
                            "object": {
                                "name": {
                                    "type": "String",
                                    "desc": "Full name of the badge"
                                }
                            }
                        },
                        "special": {
                            "type": "Object",
                            "desc": "Steam specific badges, each with a very unique way of earning/ leveling, listed by tag names. Identical to event badges, but they have no `appID` or `foil` property"
                        }
                    }
                }
            },
            "example_call": "getBadges('76561198099490962')",
            "example_data": {
                "level": 71,
                "xp": 29042,
                "level_xp": 28800,
                "next_level_xp": 29600,
                "badges": {
                    "game": {
                        "730": {
                            "appID": 730,
                            "level": 5,
                            "earned": 1466352436,
                            "xp": 500,
                            "scarcity": 2794555,
                            "foil": 0
                        },
                        "506670": {
                            "appID": 506670,
                            "level": 5,
                            "earned": 1495724426,
                            "xp": 500,
                            "scarcity": 23664,
                            "foil": 0
                        }
                    },
                    "event": {
                        "summer-2016": {
                            "name": "2016: Summer Sale",
                            "appID": 480730,
                            "level": 1,
                            "earned": 1467080364,
                            "xp": 100,
                            "scarcity": 990954,
                            "foil": 0
                        },
                        "awards-2017": {
                            "name": "2017: Steam Awards",
                            "appID": 762800,
                            "level": 22,
                            "earned": 1517712529,
                            "xp": 2200,
                            "scarcity": 13291,
                            "foil": 0
                        }
                    },
                    "special": {
                        "games": {
                            "name": "Owned Games",
                            "level": 127,
                            "earned": 1547050916,
                            "xp": 356,
                            "scarcity": 4750842
                        },
                        "years": {
                            "name": "Years of Service",
                            "level": 5,
                            "earned": 1374542223,
                            "xp": 250,
                            "scarcity": 68071999
                        }
                    }
                }
            }
        },
        "GetCommunityBadgeProgress": {
            "desc": "Returns the badge progress for specific task-based badges.",
            "function": "getBadgeProgress",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "badgeID": {
                    "type": "String",
                    "desc": "Badge ID, could also be the true integer value of the badge ID. Valid values for this are currently `community`, `summer-2012`, `holiday-2012`, `hardware-beta`, `awards-2016`, `awards-2017`, `awards-2018` and `spring-cleaning`.",
                    "default": "community"
                }
            },
            "result": {
                "quests": {
                    "type": "Object",
                    "desc": "Object of quests, listed by quest IDs",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Always 'unknown'. This will eventually contain the description of the task once a map is created to connect quest IDs to their actual tasks. You can support development of this feature by finding the `quests.json` file inside the `json` directory in the repository code!"
                        },
                        "completed": {
                            "type": "Boolean",
                            "desc": "Whether or not the task has been completed"
                        }
                    }
                },
                "count": {
                    "type": "Integer",
                    "desc": "Number of quests for this badge"
                },
                "completed": {
                    "type": "Integer",
                    "desc": "Number of completed quests for this badge"
                }
            },
            "example_call": "getBadgeProgress('76561198099490962', 'community')",
            "example_data": {
                "quests": {
                    "260": {
                        "name": "unknown",
                        "completed": false
                    },
                    "261": {
                        "name": "unknown",
                        "completed": false
                    },
                    "262": {
                        "name": "unknown",
                        "completed": false
                    },
                    "263": {
                        "name": "unknown",
                        "completed": false
                    }
                },
                "count": 4,
                "completed": 0
            }
        }
    },
    "ISteamUser": {
        "desc": "Returns more detailed information about user profiles; summaries, bans, friends. For Steam level, badges, games, and playtime, go to [IPlayerService](IPlayerService)",
        "GetFriendList": {
            "desc": "Gets the friends of the Steam user, if public.",
            "function": "getFriendList",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "sorted": {
                    "type": "Boolean",
                    "desc": "Enable sorting by friending time, with the oldest friends at the top of the resulting list",
                    "default": false
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of friends"
                },
                "friends": {
                    "type": "Array",
                    "desc": "Array of friend objects, sorted if the `sorted` paramter is `true`",
                    "object": {
                        "steamID": {
                            "type": "String",
                            "desc": "Steam ID of the friend"
                        },
                        "since": {
                            "type": "Integer",
                            "desc": "Time the friend was added, in seconds since the epoch"
                        }
                    }
                }
            },
            "example_call": "getFriendList('76561198099490962', true)",
            "example_data": {
                "count": 4,
                "friends": [
                    {
                        "steamID": "76561198064527259",
                        "since": 1374546543
                    },
                    {
                        "steamID": "76561198073477368",
                        "since": 1385304477
                    },
                    {
                        "steamID": "76561198055109162",
                        "since": 1415236183
                    },
                    {
                        "steamID": "76561198190833690",
                        "since": 1475462732
                    }
                ]
            }
        },
        "GetPlayerBans": {
            "desc": "Retrieves ban information on the provided Steam IDs. Notice that is PLURAL. You can get information on multiple Steam IDs at once, however Steam may internally limit the max number of Steam IDs you can query at once.",
            "function": "getPlayerBans",
            "parameters": {
                "steamIDs": {
                    "type": "Array",
                    "desc": "Array of Steam ID strings, or just one, no array necessary"
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned profiles, useful for checking if any Steam IDs were ignored or cropped from the final result"
                },
                "players": {
                    "type": "Object",
                    "desc": "Ban objects listed by Steam ID",
                    "object": {
                        "community": {
                            "type": "Boolean",
                            "desc": "Whether or not the account has a community ban"
                        },
                        "economy": {
                            "type": "String",
                            "desc": "What type of economy ban the account has. These are often temporary. Sadly, I don't know the possible values of this. If you have account restrictions, or know someone who does, please reach out to me so I can finish development on this part."
                        },
                        "vac": {
                            "type": "Boolean",
                            "desc": "Whether or not the account has a VAC ban. It may be possible for a single account to have multiple VAC bans, but I personally doubt it as VAC normally bans across ALL VAC secure games."
                        },
                        "bans": {
                            "type": "Integer",
                            "desc": "Total number of bans on the account; VAC + Game bans"
                        },
                        "vacBans": {
                            "type": "Integer",
                            "desc": "Number of VAC bans on the account"
                        },
                        "gameBans": {
                            "type": "Integer",
                            "desc": "Number of Game bans on the account. Game bans are not VAC bans, they are manually given to a player by the developer of the game they got banned on."
                        },
                        "lastBan": {
                            "type": "Integer",
                            "desc": "Number of days since the last ban was given to the account, a value of `0` indicates the account received a ban *today*"
                        }
                    }
                }
            },
            "example_call": "getPlayerBans('76561198099490962')",
            "example_data": {
                "count": 1,
                "players": {
                    "76561198099490962": {
                        "community": false,
                        "economy": "none",
                        "vac": false,
                        "bans": 0,
                        "vacBans": 0,
                        "gameBans": 0,
                        "lastBan": 0
                    }
                }
            }
        },
        "GetPlayerSummaries": {
            "desc": "Get basic community profile information from the Steam IDs. Notice that is PLURAL. You can get information on multiple Steam IDs at once, however Steam may internally limit the max number of Steam IDs you can query at once.",
            "function": "getPlayerSummaries",
            "parameters": {
                "steamIDs": {
                    "type": "Array",
                    "desc": "Array of Steam ID strings, or just one, no array necessary"
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of returned profiles, useful for checking if any Steam IDs were ignored or cropped from the final result"
                },
                "players": {
                    "type": "Object",
                    "desc": "Player objects listed by Steam ID",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Persona name, this is shown in games and on the website"
                        },
                        "realName": {
                            "type": "String",
                            "desc": "The \"real name\" set by the account, not guaranteed to actually be real. May be set to Boolean `false` if unset, useful for checking if a string is set before printing it"
                        },
                        "url": {
                            "type": "String",
                            "desc": "Community profile URL, may contain the Steam ID or be the custom vanity url set by the account"
                        },
                        "state": {
                            "type": "Integer",
                            "desc": "A value from 0-6; 0 - Offline, 1 - Online, 2 - Busy, 3 - Away, 4 - Snooze, 5 - Looking to Trade, 6 - Looking to Play"
                        },
                        "stateString": {
                            "type": "String",
                            "desc": "Mapped value of `state` to a string, see the `persona.json` file in `json` for values"
                        },
                        "public": {
                            "type": "Boolean",
                            "desc": "Whether or not the profile is visible, if this is false then some interfaces may not work at all, and limited data is available through player summaries"
                        },
                        "comments": {
                            "type": "Boolean",
                            "desc": "Whether or not the comments are set to public, if this is false then you won't be able to comment on the profile, and may also not be able to see comments"
                        },
                        "joined": {
                            "type": "Integer",
                            "desc": "Time the account was created, in seconds since the epoch. This is not available for private accounts, however you can easily use the Steam ID to guess the time the account was created anyway."
                        },
                        "offline": {
                            "type": "Integer",
                            "desc": "Time the account last went offline, in seconds since the epoch. This does not mean the player is currently offline, or when they *actually* went offline, just the last time their status changed to be offline."
                        },
                        "community": {
                            "type": "Boolean",
                            "desc": "Whether or not the profile has a community profile set up. You should not allow accounts without a community profile to use your services."
                        },
                        "group": {
                            "type": "Integer",
                            "desc": "The primary group set by the user, if no group is set then this value is a Boolean `false` to avoid ambiguity"
                        },
                        "inGame": {
                            "type": "Boolean",
                            "desc": "If the user is currently in a game"
                        },
                        "appID": {
                            "type": "Integer",
                            "desc": "If `inGame` is true, then this is the app ID of the game being played. If `inGame` is true and this value is 0, then the account is playing a non-Steam game."
                        },
                        "appName": {
                            "type": "String",
                            "desc": "If `inGame` is true, then this is most likely the name of the game being played. If `appID` is 0, this is the \"extra game info\" from the non-Steam game, and may not be an accurate representation of the true game name."
                        },
                        "avatar": {
                            "type": "Object",
                            "desc": "Holds the various urls for the avatar sizes",
                            "object": {
                                "small": {
                                    "type": "String",
                                    "desc": "URL for the 32x32 avatar"
                                },
                                "medium": {
                                    "type": "String",
                                    "desc": "URL for the 64x64 avatar"
                                },
                                "large": {
                                    "type": "String",
                                    "desc": "URL for the 184x184 avatar"
                                }
                            }
                        },
                        "location": {
                            "type": "Object",
                            "desc": "The public location of the account, should never be used for any real location authentication, as users can change this whenever and however they want",
                            "object": {
                                "country": {
                                    "type": "String",
                                    "desc": "Full English name of the country, is a Boolean `false` if not set by the account"
                                },
                                "state": {
                                    "type": "String",
                                    "desc": "Full English name of the state/ province/ city-state, is a Boolean `false` if not set by the account"
                                },
                                "city": {
                                    "type": "String",
                                    "desc": "Full English name of the city, is a Boolean `false` if not set by the account. Keep in mind some country states have only one possible city, and some have no city options at all."
                                },
                                "countryCode": {
                                    "type": "String",
                                    "desc": "The country code for the country, should adhere to world standards (i.e. United States code is `US`)"
                                },
                                "stateCode": {
                                    "type": "String",
                                    "desc": "The state code for the state, for some countries this is the official abbreviation (i.e. Alaska state code is `AK`) but for most this is just a random internal code"
                                },
                                "cityCode": {
                                    "type": "Integer",
                                    "desc": "The city code for the city, seems to be a completely unique ID, otherwise this is not standardized and only for internal use"
                                }
                            }
                        }
                    }
                }
            },
            "example_call": "getPlayerSummaries('76561198099490962')",
            "example_data": {
                "count": 1,
                "players": {
                    "76561198099490962": {
                        "name": "Almic",
                        "realName": "Mick Ashton",
                        "url": "https://steamcommunity.com/id/almic/",
                        "state": 1,
                        "stateString": "online",
                        "public": true,
                        "comments": true,
                        "joined": 1374542223,
                        "offline": 1547510790,
                        "community": true,
                        "group": "103582791435315066",
                        "inGame": true,
                        "appID": 730,
                        "appName": "Counter-Strike: Global Offensive",
                        "avatar": {
                            "small": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d92bde555a21e7e5074b5cdb8ed733e088cad1c5.jpg",
                            "medium": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d92bde555a21e7e5074b5cdb8ed733e088cad1c5_medium.jpg",
                            "large": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d92bde555a21e7e5074b5cdb8ed733e088cad1c5_full.jpg"
                        },
                        "location": {
                            "country": "United States",
                            "state": "Alaska",
                            "city": "Nome",
                            "countryCode": "US",
                            "stateCode": "AK",
                            "cityCode": 69
                        }
                    }
                }
            }
        },
        "GetUserGroupList": {
            "desc": "All the groups the account is a member of, this includes all game-related groups as well as community made groups.",
            "function": "getUserGroups",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                }
            },
            "result": {
                "groups": {
                    "type": "Array",
                    "desc": "Array of group ID strings"
                }
            },
            "example_call": "getUserGroups('76561198099490962')",
            "example_data": {
                "groups": [
                    "3284297",
                    "5165781",
                    "5233424",
                    "5647945",
                    "5791388",
                    "5793658",
                    "8600182",
                    "9958636",
                    "25100141",
                    "33392184",
                    "33650713"
                ]
            }
        },
        "ResolveVanityURL": {
            "desc": "Converts custom account and group names to an ID. Please do not use the entire URL, instead extract the actual name from the custom url before calling this function. For Steam accounts, custom urls are `https://steamcommunity.com/id/{{VANITY NAME}}` and for groups is `https://steamcommunity.com/groups/{{VANITY NAME}}`\r\n\r\nDo not use the third type: game groups. From the surface it looks like official game groups are not accessible by normal methods, and only show up as outdated web pages with little to no content. Official game groups will probably be deprecated in due Valve time, or may be suddenly thrown at our faces. Either way, I wouldn't recommend using them at all right now, because like I said, you can't even access the group pages by normal methods.",
            "function": "resolveName",
            "parameters": {
                "name": {
                    "type": "String",
                    "desc": "Custom name found in the url of the account or group"
                },
                "type": {
                    "type": "String",
                    "desc": "Type of name to be resolved, supported values are `user` and `group`. The integer values 1 and 2 can be passed instead.",
                    "default": "user"
                }
            },
            "result": {
                "id": {
                    "type": "String",
                    "desc": "The full Steam ID for users, or the group ID for groups"
                }
            },
            "example_call": "resolveName('almic')",
            "example_data": {
                "id": "76561198099490962"
            }
        }
    },
    "ISteamUserStats": {
        "desc": "Game statistics related APIs; achievements, scores, stats, etc.",
        "GetGlobalAchievementPercentagesForApp": {
            "noKey": true,
            "desc": "The percentage of app owners with the specific achievements. Not a substitute for actual achievements in the game, as some games have \"ghost\" achievements that can appear in this API, but are not visible in the real achievement list, no longer attainable, or even deleted after initial creation. You can safely assume that any achievements with a 0% unlock rate are \"ghost\" achievements, and should not use them for statistics.",
            "function": "getGlobalAchievements",
            "parameters": {
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                }
            },
            "result": {
                "achievements": {
                    "type": "Object",
                    "desc": "Achievement percentages listed by API name. You should ignore any achievements with a 0% unlock rate, read above about \"ghost\" achievements."
                }
            },
            "example_call": "getGlobalAchievements(730)",
            "example_data": {
                "achievements": {
                    "GIVE_DAMAGE_LOW": 86.1,
                    "KILL_ENEMY_RELOADING": 86.1,
                    "UNSTOPPABLE_FORCE": 85.3,
                    "KILL_ENEMY_LOW": 84.4,
                    "WIN_ROUNDS_LOW": 83,
                    "KILL_LOW_DAMAGE": 81.4,
                    "EARN_MONEY_LOW": 80.3,
                    "IMMOVABLE_OBJECT": 80.3,
                    "": 0
                }
            }
        },
        "GetNumberOfCurrentPlayers": {
            "noKey": true,
            "desc": "The current number of online players for a specific game.",
            "function": "getCurrentPlayers",
            "parameters": {
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                }
            },
            "result": {
                "players": {
                    "type": "Integer",
                    "desc": "Total online players"
                }
            },
            "example_call": "getCurrentPlayers(730)",
            "example_data": {
                "players": 569199
            }
        },
        "GetPlayerAchievements": {
            "desc": "Get game achievement completion stats for a player.",
            "function": "getAchievements",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                }
            },
            "result": {
                "name": {
                    "type": "String",
                    "desc": "Full name of the game"
                },
                "count": {
                    "type": "Integer",
                    "desc": "Total number of achievements in the game"
                },
                "achievements": {
                    "type": "Object",
                    "desc": "Achievement objects listed by internal achievement name",
                    "object": {
                        "unlocked": {
                            "type": "Boolean",
                            "desc": "Whether or not the achievement has been unlocked"
                        },
                        "time": {
                            "type": "Integer",
                            "desc": "Time the achievement was unlocked, in seconds since the epoch."
                        }
                    }
                }
            },
            "example_call": "getAchievements('76561198099490962', 264710)",
            "example_data": {
                "name": "Subnautica",
                "count": 4,
                "achievements": {
                    "DiveForTheVeryFirstTime": {
                        "unlocked": true,
                        "time": 1516378680
                    },
                    "RepairAuroraReactor": {
                        "unlocked": false,
                        "time": 0
                    },
                    "BuildSeamoth": {
                        "unlocked": true,
                        "time": 1516777135
                    },
                    "HatchCutefish": {
                        "unlocked": false,
                        "time": 0
                    }
                }
            }
        },
        "GetSchemaForGame": {
            "desc": "Retrieve detailed information about the stats and achievements for a game. Keep in mind that Steam doesn't seem to publicly display any stats other than achievements, despite it being tracked. Thanks Volvo.",
            "function": "getGameSchema",
            "parameters": {
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                }
            },
            "result": {
                "name": {
                    "type": "String",
                    "desc": "Full name of the game"
                },
                "statCount": {
                    "type": "Integer",
                    "desc": "Total number of tracked stats in the game"
                },
                "achievementCount": {
                    "type": "Integer",
                    "desc": "Total number of achievements in the game"
                },
                "stats": {
                    "type": "Object",
                    "desc": "Stat objects listed by internal stat name",
                    "object": {
                        "displayName": {
                            "type": "String",
                            "desc": "String representation of the stat, is NOT guaranteed to be different from the internal api name"
                        },
                        "default": {
                            "type": "Integer",
                            "desc": "The default value of the stat"
                        }
                    }
                },
                "achievements": {
                    "type": "Object",
                    "desc": "Achievement objects listed by internal achievement name",
                    "object": {
                        "displayName": {
                            "type": "String",
                            "desc": "String representation of the achievement, same as the name shown on individual achievement pages"
                        },
                        "description": {
                            "type": "String",
                            "desc": "String description of the achievement, will be empty if the achievement is hidden. This often describes exactly how to get the achievement, which is why hidden achievements do not return this in the api."
                        },
                        "hidden": {
                            "type": "Boolean",
                            "desc": "Whether or not the achievement is a secret (hidden) achievement"
                        },
                        "icon": {
                            "type": "String",
                            "desc": "The full url to the unlocked icon image"
                        },
                        "iconLocked": {
                            "type": "String",
                            "desc": "The full url to the locked icon image, seems to be standard that this is just the unlocked version in gray-scale color"
                        }
                    }
                }
            },
            "example_call": "getGameSchema(264710)",
            "example_data": {
                "name": "Subnautica",
                "statCount": 3,
                "achievementCount": 3,
                "stats": {
                    "s1_AllTimeDepth": {
                        "displayName": "Max all time depth",
                        "default": 0
                    },
                    "s2_HasTank": {
                        "displayName": "Player has crafted tank",
                        "default": 0
                    },
                    "s3_FeedbackSubmit": {
                        "displayName": "Player has submitted feedback",
                        "default": 0
                    }
                },
                "achievements": {
                    "DiveForTheVeryFirstTime": {
                        "displayName": "Getting Your Feet Wet",
                        "description": "",
                        "hidden": true,
                        "icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/89b61cdeb0e1b6d22532245ce394f00d0a4277e1.jpg",
                        "iconLocked": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/680214ffd7727865ea404b897aecbc0f667a9377.jpg"
                    },
                    "RepairAuroraReactor": {
                        "displayName": "Extinction Event Avoided",
                        "description": "",
                        "hidden": true,
                        "icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/1c59192a1e1ce720cd3dc77a1ea4e663f1f5516f.jpg",
                        "iconLocked": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/680214ffd7727865ea404b897aecbc0f667a9377.jpg"
                    },
                    "HatchCutefish": {
                        "displayName": "\"Man's Best Friend\"",
                        "description": "",
                        "hidden": true,
                        "icon": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/7e5b3420b69b9077e7d068dc6f9c646725577599.jpg",
                        "iconLocked": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/264710/680214ffd7727865ea404b897aecbc0f667a9377.jpg"
                    }
                }
            }
        },
        "GetUserStatsForGame": {
            "desc": "Get game stats for a user. These are internally defined by the game developer, and they are responsible for actually updating the stats. Also, Steam lags behind when stats are updated, so you simply can't rely on these stats updating in a timely manner. Trust me, I'm speaking from experience on this.\r\n\r\nPlease know that certain games have a custom object structure defined, so you need to check these pages for the data point names, rather than what the Steam API says:\r\n\r\n* [Counter-Strike: Global Offensive](Stats-CSGO)",
            "function": "getStats",
            "parameters": {
                "steamID": {
                    "type": "String",
                    "desc": "Steam ID of the user, as a string"
                },
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                }
            },
            "result": {
                "name": {
                    "type": "String",
                    "desc": "Full name of the game"
                },
                "count": {
                    "type": "Integer",
                    "desc": "Total number of stats returned, will likely be less than the number defined in the game schema"
                },
                "stats": {
                    "type": "Object",
                    "desc": "Stats listed by their original Web API name. **NOTICE!** Some games have custom object definitions, bulleted above."
                }
            },
            "example_call": "getStats('76561198099490962', 264710)",
            "example_data": {
                "name": "Subnautica",
                "count": 2,
                "stats": {
                    "s1_AllTimeDepth": 84,
                    "s2_HasTank": 1
                }
            }
        }
    },
    "ISteamEconomy": {
        "desc": "Steam economy item related stuff. Be sure to look at [IEconService](IEconService) for trading stuff.",
        "GetAssetClassInfo": {
            "desc": "Access item specific details by `class` and `instance` IDs. You can pass any objects that have a `class` ID, and you can use `instance` IDs for more specific details on a certain item. Items returned from [GetTradeHistory](ISteamEconomy#GetTradeHistory) can be passed directly to this function!\r\n\r\nThe Steam Web API goes through each item one at a time, and stops giving results as soon as an item can't be located. I.e.: You pass 10 items, and all items except the 4th item are valid, however because the 4th failed, Steam returns immediately and only 3 items are in the response.\r\n\r\n*NOTE:* If you only pass a single item, the result will be that item object itself, rather than being an object with a `count` and `items` object.",
            "function": "getItemInfo",
            "parameters": {
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                },
                "items": {
                    "type": "Object/ Array of Objects",
                    "desc": "An object or array of objects defining items. They must include a `class` ID, and may optionally include an `instance` ID to get more specific details about the item."
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Total number of items returned. If this is less than the number passed, then one of the items failed. **Only included if more than one item was requested.**"
                },
                "items": {
                    "type": "Object",
                    "desc": "Item objects listed by their `class` ID. If an `instance` ID was passed for a certain item, then that name is `{{class}}_{{instance}}`. **Only included if more than one item was requested.**",
                    "object": {
                        "name": {
                            "type": "String",
                            "desc": "Short name of the item"
                        },
                        "nameColor": {
                            "type": "String",
                            "desc": "Hexadecimal color that the name should be shown as"
                        },
                        "type": {
                            "type": "String",
                            "desc": "Specific type of the item. Can be used for categorizing items."
                        },
                        "marketName": {
                            "type": "String",
                            "desc": "Name shown in the market, exact search name"
                        },
                        "marketHash": {
                            "type": "String",
                            "desc": "URL form of the market name"
                        },
                        "marketUrl": {
                            "type": "String",
                            "desc": "Full URL to the market page for this kind of item"
                        },
                        "tradable": {
                            "type": "Boolean",
                            "desc": "Whether this kind of item is tradable"
                        },
                        "marketable": {
                            "type": "Boolean",
                            "desc": "Whether this kind of item is marketable"
                        },
                        "commodity": {
                            "type": "Boolean",
                            "desc": "Whether this kind of item is a commodity, meaning all items are technically identical"
                        },
                        "tradeRestriction": {
                            "type": "Integer",
                            "desc": "Number of days this item will not be tradable after buying from the market or receiving in a trade"
                        },
                        "icon": {
                            "type": "String",
                            "desc": "URL to an icon for this item. A size can be appended to the end like `200x200` to get a specific size image, where the smallest dimensions will match."
                        }
                    }
                }
            },
            "example_call": "getItemInfo(730, {class: '2735394074'})",
            "example_data": {
                "name": "AUG | Stymphalian",
                "nameColor": "D2D2D2",
                "type": "Classified Rifle",
                "marketName": "AUG | Stymphalian (Factory New)",
                "marketHash": "AUG | Stymphalian (Factory New)",
                "marketUrl": "https://steamcommunity.com/market/listings/undefined/AUG | Stymphalian (Factory New)",
                "tradable": true,
                "marketable": true,
                "commodity": false,
                "tradeRestriction": 7,
                "icon": "https://steamcommunity-a.akamaihd.net/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpot6-iFABz7PLddgJR-MW7hIiKm_71PYTTn3lV-_p9g-7J4bP5iUazrl1sa23zd4KQJlQ_YlCB-la8xuu8h5S5vMzJwXpi7HUl4H2LnRLkhxhNcKUx0ob1nNaW/"
            }
        },
        "GetAssetPrices": {
            "desc": "Find prices of purchasable in-game items. Only works for economy appIDs, calling this with games that have no in-game purchasable items will certainly result in errors.",
            "function": "getGameItemPrices",
            "parameters": {
                "appID": {
                    "type": "Integer",
                    "desc": "Steam internal app ID, can also be a string"
                },
                "currencyFilter": {
                    "type": "String",
                    "desc": "The 3-letter currency code to return, for example 'USD' or 'JPY'. Boolean `false` or empty string returns all prices.",
                    "default": false
                }
            },
            "result": {
                "count": {
                    "type": "Integer",
                    "desc": "Number of items returned"
                },
                "items": {
                    "type": "Array",
                    "desc": "Array of item objects",
                    "object": {
                        "class": {
                            "type": "String",
                            "desc": "Unique class ID for the item, often enough to uniquely identify an item"
                        },
                        "name": {
                            "type": "String",
                            "desc": "Not actually the name of the item, but you can use the `class` in a call to `getItemInfo()` to get a reliable name"
                        },
                        "date": {
                            "type": "String",
                            "desc": "Likely meant for the game, such as creating limited time offers or such. Seems to be a string conversion from a unix timestamp, as sometimes the date of the epoch appears here, signalling a unix timestamp of `0`, which for all intents and purposes is a useless value."
                        },
                        "prices": {
                            "type": "Object",
                            "desc": "Prices listed by the 3-letter currency code, all prices are in the smallest division of the currency. For example, USD is represented by cents, so a value of `299` really means `$2.99`. **Notice:** sometimes the invalid `Unknown` currency appears, you should ignore that."
                        },
                        "pricesOriginal": {
                            "type": "Object",
                            "desc": "**May not be defined**. The \"original\" prices of the items, used in-game to show discounted prices. If you are representing this visually, you should check that the \"original\" price is actually less than the current price, as most of the time the \"original\" and current price are actually the same."
                        }
                    }
                }
            },
            "example_call": "getGameItemPrices(730)",
            "example_data": {
                "count": 3,
                "items": [
                    {
                        "class": "3106078545",
                        "name": "1375",
                        "date": "2018-11-29",
                        "prices": {
                            "USD": 249,
                            "GBP": 199,
                            "EUR": 220,
                            "RUB": 17000,
                            "BRL": 979,
                            "Unknown": 0,
                            "JPY": 27500
                        }
                    },
                    {
                        "class": "2948967440",
                        "name": "1374",
                        "date": "2018-06-07",
                        "prices": {
                            "USD": 249,
                            "GBP": 199,
                            "EUR": 220,
                            "RUB": 17000,
                            "BRL": 979,
                            "Unknown": 0,
                            "JPY": 27500
                        }
                    },
                    {
                        "class": "2727231383",
                        "name": "1373",
                        "date": "2017-12-20",
                        "prices": {
                            "USD": 249,
                            "GBP": 199,
                            "EUR": 220,
                            "RUB": 17000,
                            "BRL": 979,
                            "Unknown": 0,
                            "JPY": 27500
                        }
                    }
                ]
            }
        }
    },
    "IEconService": {
        "desc": "Trading specific interface. Be sure to look at [ISteamEconomy](ISteamEconomy) for item specific stuff.",
        "GetTradeHistory": {
            "desc": "Get a list of the most recent trades. This only returns trades connected to the account using the API key. Since you have to have a Steam account to get an API key, the trades will only be ones for the account connected.",
            "function": "getTradeHistory",
            "parameters": {
                "trades": {
                    "type": "Integer",
                    "desc": "Maximum number of trades to return. Steam limits you to 500 trades at a time, and if `moreInfo` is true, this drops to 100 trades at a time. The library will automatically apply this limit for you if you go over it.",
                    "default": 10
                },
                "moreInfo": {
                    "type": "Boolean",
                    "desc": "Whether to retrieved more details about each item, specifically everything that [GetAssetClassInfo](ISteamEconomy#GetAssetClassInfo) returns, but without the extra calls",
                    "default": false
                },
                "includeTotal": {
                    "type": "Boolean",
                    "desc": "Whether to return the total number of successful trades the account has in the history. If `includeFailed` is true, this will be the total of all trades created.",
                    "default": false
                },
                "includeFailed": {
                    "type": "Boolean",
                    "desc": "Whether to include failed trades in the results",
                    "default": false
                },
                "fromTime": {
                    "type": "Number",
                    "desc": "Timestamp (seconds since epoch) to search for trades, any trades made at or before this time are returned. Value of `0` is invalid and will be ignored.",
                    "default": 0
                }
            },
            "result": {
                "hasMore": {
                    "type": "Boolean",
                    "desc": "If there are more trades available after the last trade returned in this call"
                },
                "count": {
                    "type": "Integer",
                    "desc": "Number of trade objects returned, could be smaller than the amount requested if all trades matching the criteria have been returned"
                },
                "total": {
                    "type": "Integer",
                    "desc": "Total number of trades associated with the account. Only returned if `includeTotal` is true."
                },
                "trades": {
                    "type": "Array",
                    "desc": "Array of trade objects",
                    "object": {
                        "id": {
                            "type": "String",
                            "desc": "The unique trade ID for this trade, is guaranteed to be unique"
                        },
                        "status": {
                            "type": "Integer",
                            "desc": "The status of this trade"
                        },
                        "other": {
                            "type": "String",
                            "desc": "The Steam ID of the other account in the trade"
                        },
                        "created": {
                            "type": "Integer",
                            "desc": "Time the trade was created, in seconds since the epoch"
                        },
                        "received": {
                            "type": "Array",
                            "desc": "Array of item objects being received in the trade",
                            "object": {
                                "amount": {
                                    "type": "Integer",
                                    "desc": "Number of these items being received, will only be more than 1 if the item type is a currency (like gems)"
                                },
                                "appID": {
                                    "type": "Integer",
                                    "desc": "Steam internal app ID, can also be a string"
                                },
                                "class": {
                                    "type": "String",
                                    "desc": "Unique class ID for the item, often enough to uniquely identify an item"
                                },
                                "instance": {
                                    "type": "String",
                                    "desc": "Unique instance ID for the item, truly identifies an item when combined with the class ID"
                                },
                                "assetID": {
                                    "type": "String",
                                    "desc": "Steam internal item ID, used to identify items during a trade, and is renewed every time the item changes inventories"
                                },
                                "newAssetID": {
                                    "type": "String",
                                    "desc": "The new asset ID of the item after trading, can be used to add this specific item to future trades"
                                },
                                "details": {
                                    "type": "Object",
                                    "desc": "Additional details for the item, only returned if `moreInfo` is true",
                                    "object": {
                                        "name": {
                                            "type": "String",
                                            "desc": "Short name of the item"
                                        },
                                        "nameColor": {
                                            "type": "String",
                                            "desc": "Hexadecimal color that the name should be shown as"
                                        },
                                        "type": {
                                            "type": "String",
                                            "desc": "Specific type of the item. Can be used for categorizing items."
                                        },
                                        "marketName": {
                                            "type": "String",
                                            "desc": "Name shown in the market, exact search name"
                                        },
                                        "marketHash": {
                                            "type": "String",
                                            "desc": "URL form of the market name"
                                        },
                                        "marketUrl": {
                                            "type": "String",
                                            "desc": "Full URL to the market page for this kind of item"
                                        },
                                        "tradable": {
                                            "type": "Boolean",
                                            "desc": "Whether this kind of item is tradable"
                                        },
                                        "marketable": {
                                            "type": "Boolean",
                                            "desc": "Whether this kind of item is marketable"
                                        },
                                        "commodity": {
                                            "type": "Boolean",
                                            "desc": "Whether this kind of item is a commodity, meaning all items are technically identical"
                                        },
                                        "tradeRestriction": {
                                            "type": "Integer",
                                            "desc": "Number of days this item will not be tradable after buying from the market or receiving in a trade"
                                        },
                                        "icon": {
                                            "type": "String",
                                            "desc": "URL to an icon for this item. A size can be appended to the end like `200x200` to get a specific size image, where the smallest dimensions will match."
                                        }
                                    }
                                }
                            }
                        },
                        "given": {
                            "type": "Array",
                            "desc": "Array of item objects being given in the trade, structurally identical to `received` array above"
                        }
                    }
                }
            },
            "example_call": "getTradeHistory(1, true)",
            "example_data": {
                "hasMore": true,
                "count": 1,
                "total": 397,
                "trades": [
                    {
                        "id": "2167811088932369944",
                        "status": 3,
                        "other": "76561198190833690",
                        "created": 1537325181,
                        "received": [],
                        "given": [
                            {
                                "amount": 1,
                                "appID": 730,
                                "class": "3016071886",
                                "instance": "236997301",
                                "assetID": "14850090609",
                                "newAssetID": "14857676921",
                                "details": {
                                    "name": "London 2018 Dust II Souvenir Package",
                                    "nameColor": "D2D2D2",
                                    "type": "Base Grade Container",
                                    "marketName": "London 2018 Dust II Souvenir Package",
                                    "marketHash": "London 2018 Dust II Souvenir Package",
                                    "marketUrl": "https://steamcommunity.com/market/listings/730/London 2018 Dust II Souvenir Package",
                                    "tradable": true,
                                    "marketable": true,
                                    "commodity": false,
                                    "currency": false,
                                    "tradeRestriction": 7,
                                    "icon": "https://steamcommunity-a.akamaihd.net/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXU5A1PIYQNqhpOSV-fRPasw8rsX1J6IQtZ5Or0czhwwfzFfgJG6eOygZOfxbmlN7qGzzpV7MMj2u3Hod2i3VewqhI5Nzryd4KQIQc5ZQmD-gfswbzum9bi61mnJtm8/"
                                }
                            }
                        ]
                    }
                ]
            }
        },
        "GetTradeStatus": {
            "desc": "Get details on a single trade offer.",
            "function": "getTradeOffer",
            "parameters": {
                "tradeID": {
                    "type": "String",
                    "desc": "Unique trade offer ID"
                },
                "moreInfo": {
                    "type": "Boolean",
                    "desc": "Whether to return item descriptions",
                    "default": false
                }
            },
            "result": {
                "id": {
                    "type": "String",
                    "desc": "The unique trade ID for this trade, is guaranteed to be unique"
                },
                "status": {
                    "type": "Integer",
                    "desc": "The status of this trade"
                },
                "other": {
                    "type": "String",
                    "desc": "The Steam ID of the other account in the trade"
                },
                "created": {
                    "type": "Integer",
                    "desc": "Time the trade was created, in seconds since the epoch"
                },
                "received": {
                    "type": "Array",
                    "desc": "Array of item objects being received in the trade",
                    "object": {
                        "amount": {
                            "type": "Integer",
                            "desc": "Number of these items being received, will only be more than 1 if the item type is a currency (like gems)"
                        },
                        "appID": {
                            "type": "Integer",
                            "desc": "Steam internal app ID, can also be a string"
                        },
                        "class": {
                            "type": "String",
                            "desc": "Unique class ID for the item, often enough to uniquely identify an item"
                        },
                        "instance": {
                            "type": "String",
                            "desc": "Unique instance ID for the item, truly identifies an item when combined with the class ID"
                        },
                        "assetID": {
                            "type": "String",
                            "desc": "Steam internal item ID, used to identify items during a trade, and is renewed every time the item changes inventories"
                        },
                        "newAssetID": {
                            "type": "String",
                            "desc": "The new asset ID of the item after trading, can be used to add this specific item to future trades"
                        },
                        "details": {
                            "type": "Object",
                            "desc": "Additional details for the item, only returned if `moreInfo` is true",
                            "object": {
                                "name": {
                                    "type": "String",
                                    "desc": "Short name of the item"
                                },
                                "nameColor": {
                                    "type": "String",
                                    "desc": "Hexadecimal color that the name should be shown as"
                                },
                                "type": {
                                    "type": "String",
                                    "desc": "Specific type of the item. Can be used for categorizing items."
                                },
                                "marketName": {
                                    "type": "String",
                                    "desc": "Name shown in the market, exact search name"
                                },
                                "marketHash": {
                                    "type": "String",
                                    "desc": "URL form of the market name"
                                },
                                "marketUrl": {
                                    "type": "String",
                                    "desc": "Full URL to the market page for this kind of item"
                                },
                                "tradable": {
                                    "type": "Boolean",
                                    "desc": "Whether this kind of item is tradable"
                                },
                                "marketable": {
                                    "type": "Boolean",
                                    "desc": "Whether this kind of item is marketable"
                                },
                                "commodity": {
                                    "type": "Boolean",
                                    "desc": "Whether this kind of item is a commodity, meaning all items are technically identical"
                                },
                                "tradeRestriction": {
                                    "type": "Integer",
                                    "desc": "Number of days this item will not be tradable after buying from the market or receiving in a trade"
                                },
                                "icon": {
                                    "type": "String",
                                    "desc": "URL to an icon for this item. A size can be appended to the end like `200x200` to get a specific size image, where the smallest dimensions will match."
                                }
                            }
                        }
                    }
                },
                "given": {
                    "type": "Array",
                    "desc": "Array of item objects being given in the trade, structurally identical to `received` array above"
                }
            },
            "example_call": "getTradeOffer('2167811088932369944')",
            "example_data": {
                "id": "2167811088932369944",
                "status": 3,
                "other": "76561198190833690",
                "created": 1537325181,
                "received": [],
                "given": [
                    {
                        "amount": 1,
                        "appID": 730,
                        "class": "3016071886",
                        "instance": "236997301",
                        "assetID": "14850090609",
                        "newAssetID": "14857676921"
                    }
                ]
            }
        }
    },
    "Special": {
        "desc": "Custom functions that don't use the traditional Steam Web API stuff. As such, they are likely to change in functionality at some point in the future. For now these are safe to use in production, but be warned!",
        "GetGroupInfo": {
            "noKey": true,
            "desc": "Retrieve detailed information about a community group. Like player summaries but for groups!",
            "function": "getGroupInfo",
            "parameters": {
                "id": {
                    "type": "String",
                    "desc": "Group 64-bit ID, short ID, or vanity url name. The 64-bit ID is used in just about all places on the Steam site, the vanity name only appears as the URL, and the short ID is only visible to group admins and through the [GetUserGroupList](ISteamUser#GetUserGroupList) API. All of these work just the same, however you should favor the 64-bit ID over the short ID and name when you can."
                },
                "type": {
                    "type": "String",
                    "desc": "Type of ID for the group, supported values are `gid` and `group`. Use `gid` for the number IDs, and `group` for the vanity url name.",
                    "default": "gid"
                }
            },
            "result": {
                "gid": {
                    "type": "String",
                    "desc": "Full group ID number. Fun trivia, Steam seems to only use the last 32 bits internally. Check out the hexadecimal format of any gid!"
                },
                "name": {
                    "type": "String",
                    "desc": "Unique group name, locked on group creation. This is NOT THE VANITY URL, and as such DOES NOT WORK FOR GETTING GROUP INFO."
                },
                "vanityName": {
                    "type": "String",
                    "desc": "The unique group url name, can be changed at any time by group admins"
                },
                "summary": {
                    "type": "String",
                    "desc": "HTML code for the group description, since this comes from Steam it is safe to be rendered right on your own web pages, however keep in mind that all links are redirected to the Steam link filter"
                },
                "members": {
                    "type": "Integer",
                    "desc": "Total number of members in the group, slightly smaller than the true number due to private accounts not being included in this count"
                },
                "membersReal": {
                    "type": "Integer",
                    "desc": "True number of members in the group, although the regular `members` count is more accurate because it doesn't include all the private profiles"
                },
                "membersOnline": {
                    "type": "Integer",
                    "desc": "Number of members currently online"
                },
                "membersGame": {
                    "type": "Integer",
                    "desc": "Number of members playing a game"
                },
                "membersChat": {
                    "type": "Integer",
                    "desc": "Number of members in the group chat room"
                },
                "logo": {
                    "type": "Object",
                    "desc": "Holds the various urls for the group logo sizes",
                    "object": {
                        "small": {
                            "type": "String",
                            "desc": "URL for the 32x32 logo"
                        },
                        "medium": {
                            "type": "String",
                            "desc": "URL for the 64x64 logo"
                        },
                        "large": {
                            "type": "String",
                            "desc": "URL for the 184x184 logo"
                        }
                    }
                }
            },
            "example_call": "getGroupInfo('103582791435315066')",
            "example_data": {
                "gid": "103582791435315066",
                "name": "DINOSOWER1337",
                "vanityName": "DINOSOWEROfficial",
                "summary": "Welcome to the group anyone can wear the tag! not like I can stop em :)<br><br>There's only two types of players in dinosower. Cheaters and people who arent better than me.",
                "members": 415842,
                "membersReal": 453019,
                "membersOnline": 24858,
                "membersGame": 2695,
                "membersChat": 429,
                "logo": {
                    "small": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/eafb277c3504bf10fe6d800d96ea074516a47f4e.jpg",
                    "medium": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/eafb277c3504bf10fe6d800d96ea074516a47f4e_medium.jpg",
                    "large": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/eafb277c3504bf10fe6d800d96ea074516a47f4e_full.jpg"
                }
            }
        }
    },
    "CSGO": {
        "desc": "A collection of Counter-Strike: Global Offensive related interfaces and functions. These functions all lie in the `CSGO` object of the module, so double-check the examples before trying to use these! Some functions that have an `appID` parameter have shortcuts in the `CSGO` object. For example:\r\n\r\n```javascript\r\n// instead of:\r\napi.getStats('76561198099490962', 730)\r\n\r\n// you can just do:\r\napi.CSGO.getStats('76561198099490962')\r\n```\r\n\r\nAnd to make things even simpler, you may be able to do `const api = require('steam-js-api').CSGO` if you only need these CSGO functions.\r\n\r\n### Functions Available\r\nUse these like you normally would, but don't pass the `appID` parameter.\r\n#### ISteamUserStats\r\n* [getGlobalAchievements(callback)](SteamUserStats#getGlobalAchievements)\r\n* [getCurrentPlayers(callback)](SteamUserStats#getCurrentPlayers)\r\n* [getAchievements(steamID, callback)](SteamUserStats#getAchievements)\r\n* [getGameSchema(callback)](SteamUserStats#getGameSchema)\r\n* [getStats(steamID, callback)](SteamUserStats#getStats)\r\n#### ISteamEconomy\r\n* [getItemInfo(callback)](SteamEconomy#getItemInfo)\r\n* [getGameItemPrices(callback)](SteamEconomy#getGameItemPrices)",
        "GetGameMapsPlaytime": {
            "desc": "Grab relative playtime percentages for maps. Right now this only shows the last bit of data from the most recent operation, but I suspect Valve will soon add all maps to this API. By soon, I mean *Valve-time* soon.\r\n\r\nI suggest you pay careful attention to the result of this call, and plan for the object structure to change without notice. The raw data is added only as a fallback should Valve make big changes to this API, and you should build any implementation to support the raw fallback data should the custom object fail to build. As a precaution, this function will log a message to the console if it ever fails due to this, however the raw data should always be returned regardless.",
            "function": "CSGO.getMapPlaytime",
            "parameters": {
                "interval": {
                    "type": "String",
                    "desc": "The interval to return data for, can be `day`, `week`, or `month`",
                    "default": "day"
                },
                "gameMode": {
                    "type": "String",
                    "desc": "Which specific game mode should the data be from, can be `competitive` or `casual`",
                    "default": "competitive"
                },
                "mapGroup": {
                    "type": "String",
                    "desc": "The specific map group to return. At the moment this can ***only*** be `operation`. If you plan on using this function to track data, I suggest you plan around this default changing or no longer working, as Valve will likely be adding more options to this in the future.",
                    "default": "operation"
                }
            },
            "result": {
                "start": {
                    "type": "Integer",
                    "desc": "The time the data started aggregating, in seconds since the epoch"
                },
                "maps": {
                    "type": "Object",
                    "desc": "All maps by internal map name, i.e. `de_dust2`, with the values being their relative playtime percentage. **NOTE:** This may stop working without notice, and you should fallback to the below `raw` data in case this object fails to populate."
                },
                "raw": {
                    "type": "Array",
                    "desc": "Raw data from the API. The format is a defined list of \"key headers\" and a list of \"rows\", which this object mimics."
                }
            },
            "example_call": "CSGO.getMapPlaytime('week', 'casual', 'operation')",
            "example_data": {
                "start": 1509926400,
                "maps": {
                    "cs_agency": 0.38292873923257637,
                    "cs_insertion": 0.19107282693813626,
                    "de_blackgold": 0.04463586530931871,
                    "de_austria": 0.20438527799530148,
                    "de_lite": 0.028191072826938134,
                    "de_shipped": 0.10415035238841033,
                    "de_thrill": 0.04463586530931871
                },
                "raw": [
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "cs_agency",
                        "RelativePercentage": 38.29287392325764
                    },
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "cs_insertion",
                        "RelativePercentage": 19.107282693813627
                    },
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "de_blackgold",
                        "RelativePercentage": 4.463586530931871
                    },
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "de_austria",
                        "RelativePercentage": 20.43852779953015
                    },
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "de_lite",
                        "RelativePercentage": 2.8191072826938135
                    },
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "de_shipped",
                        "RelativePercentage": 10.415035238841034
                    },
                    {
                        "IntervalStartTimeStamp": 1509926400,
                        "MapName": "de_thrill",
                        "RelativePercentage": 4.463586530931871
                    }
                ]
            }
        },
        "GetGameServersStatus": {
            "desc": "Current status of various CSGO systems and servers. This is cached internally, so this only updates every minute or so. You should wait at least one minute between calls, and check every couple seconds until the `timestamp` changes.",
            "function": "CSGO.getServerStatus",
            "parameters": {},
            "result": {
                "version": {
                    "type": "Integer",
                    "desc": "Internal game version number, looks more like a build number"
                },
                "timestamp": {
                    "type": "Integer",
                    "desc": "Time the data was updated, in seconds since the epoch"
                },
                "time": {
                    "type": "String",
                    "desc": "String representation of the `timestamp`"
                },
                "logon": {
                    "type": "String",
                    "desc": "Status of the logon service. Could potentially be `online`, `delayed` or `offline`."
                },
                "inventory": {
                    "type": "String",
                    "desc": "Status of the community inventory service. Could potentially be `online`, `delayed` or `offline`."
                },
                "perfectWorld": {
                    "type": "Object",
                    "desc": "Perfect World service information",
                    "object": {
                        "logon": {
                            "type": "String",
                            "desc": "Status of the logon service. Could potentially be `online`, `delayed` or `offline`."
                        },
                        "logonLatency": {
                            "type": "String",
                            "desc": "Speed of the logon service. The only known value is `normal`."
                        },
                        "purchase": {
                            "type": "String",
                            "desc": "Likely the status of in-game purchases, but that is just a theory... A GAME THEORY- I'm sorry."
                        },
                        "purchaseLatency": {
                            "type": "String",
                            "desc": "Speed of in-game purchases. The only known value is `normal`."
                        }
                    }
                },
                "matchmaking": {
                    "type": "Object",
                    "desc": "Matchmaking information",
                    "object": {
                        "status": {
                            "type": "String",
                            "desc": "Status of matchmaking. The only known value is `normal`."
                        },
                        "players": {
                            "type": "Integer",
                            "desc": "Number of currently online players with CSGO open"
                        },
                        "servers": {
                            "type": "Integer",
                            "desc": "Number of online servers, I believe this includes community hosted servers, correct me if I'm wrong though!"
                        },
                        "searching": {
                            "type": "Integer",
                            "desc": "Players currently searching for a game, I believe this only includes competitive lobbies, correct me if I'm wrong though!"
                        },
                        "searchTime": {
                            "type": "Integer",
                            "desc": "Average wait-time to find a game. I do not know how this is actually calculated, tell me if you know!"
                        }
                    }
                },
                "servers": {
                    "type": "Object",
                    "desc": "Server/ Datacenter information, listed by region name",
                    "object": {
                        "capacity": {
                            "type": "String",
                            "desc": "Server type, can be `full` or `high`"
                        },
                        "load": {
                            "type": "String",
                            "desc": "Current server load, can be `idle`, `low`, `medium` or `high`"
                        }
                    }
                }
            },
            "example_call": "CSGO.getServerStatus()",
            "example_data": {
                "version": 13674,
                "timestamp": 1548562114,
                "time": "Sat Jan 26 20:08:34 2019",
                "logon": "normal",
                "inventory": "delayed",
                "perfectWorld": {
                    "logon": "online",
                    "logonLatency": "normal",
                    "purchase": "online",
                    "purchaseLatency": "normal"
                },
                "matchmaking": {
                    "status": "normal",
                    "players": 246247,
                    "servers": 163438,
                    "searching": 7801,
                    "searchTime": 130
                },
                "servers": {
                    "Peru": {
                        "capacity": "high",
                        "load": "low"
                    },
                    "EU West": {
                        "capacity": "full",
                        "load": "idle"
                    },
                    "EU East": {
                        "capacity": "full",
                        "load": "idle"
                    },
                    "Poland": {
                        "capacity": "full",
                        "load": "idle"
                    },
                    "India East": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "Hong Kong": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "Spain": {
                        "capacity": "high",
                        "load": "idle"
                    },
                    "Chile": {
                        "capacity": "full",
                        "load": "high"
                    },
                    "US Southwest": {
                        "capacity": "high",
                        "load": "low"
                    },
                    "US Southeast": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "India": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "EU North": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "Emirates": {
                        "capacity": "high",
                        "load": "idle"
                    },
                    "US Northwest": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "South Africa": {
                        "capacity": "full",
                        "load": "idle"
                    },
                    "Brazil": {
                        "capacity": "full",
                        "load": "medium"
                    },
                    "US Northeast": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "US Northcentral": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "Japan": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "Singapore": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "Australia": {
                        "capacity": "full",
                        "load": "low"
                    },
                    "China Shanghai": {
                        "capacity": "high",
                        "load": "low"
                    },
                    "China Tianjin": {
                        "capacity": "high",
                        "load": "low"
                    },
                    "China Guangzhou": {
                        "capacity": "high",
                        "load": "low"
                    }
                }
            }
        }
    }
}
